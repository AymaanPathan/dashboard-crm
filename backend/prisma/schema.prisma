generator client {
  provider = "prisma-client-js"
}

datasource db{
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  sales_manager
  sales_rep
  telecaller
  finance
  ops
}


model user {
  id         String   @id @default(uuid())
  role       Role     @default(sales_rep)
  managerId  String?
  manager       user?   @relation("UserManager", fields: [managerId], references: [id])
  teamMembers   user[]  @relation("UserManager")  // All Users under this user
  username   String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  otp        String?
  otpExpiry  DateTime?
  currentOrganizationId String? 
  currentOrganization   Organization? @relation(fields: [currentOrganizationId], references: [id])
  ownedOrganizations Organization[] @relation("OrgOwnedBy")
  assignedLeads Lead[] @relation("LeadAssignedTo")
  leadsCreated  Lead[]   @relation("LeadCreatedBy")
  myTasks Task[] @relation("UserCreatedTasks")
}
model Stage {
  id             String        @id @default(uuid())
  name           String
  order          Int           @default(0) // Optional, to allow drag-drop or display order
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  leads          Lead[]        @relation("LeadStage")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Organization {
  id                       String   @id @default(uuid())
  organization_name        String
  company_website          String?
  industry                 String
  company_size             String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  employees                user[]
  owner                    user?     @relation("OrgOwnedBy", fields: [ownerId], references: [id])
  ownerId                  String?

  stages                   Stage[]
  leads                    Lead[]
}

model Lead {
  position          Int      @default(0)
  @@index([organizationId, stageId, position])
  id                String   @id @default(uuid())
  name              String
  email             String?
  phone             String?
  company           String?
  source            String?
  budget            String?
  notes             String?
  leadType          String?
  contactPersonName String?
  address           Json?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdBy         String?
  createdByUser     user? @relation("LeadCreatedBy", fields: [createdBy], references: [id])
  assignedToId      String?
  assignedTo        user? @relation("LeadAssignedTo", fields: [assignedToId], references: [id])

  // New relation to stage
  stageId           String?
  stage             Stage? @relation("LeadStage", fields: [stageId], references: [id])
  tasks Task[]
}



enum TaskStatus {
  pending
  completed
  cancelled
}


enum TaskRepeatInterval {
  none
  daily
  weekly
  monthly
}

model Task {
  id     String @id @default(uuid())
  title String
  description    String?
  dueDate        DateTime
  reminder DateTime?
  status TaskStatus @default(pending)
  repeatInterval TaskRepeatInterval?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  leadId String
  lead Lead @relation(fields: [leadId],references: [id],onDelete: Cascade)
  createdById String
  createdBy user @relation("UserCreatedTasks",fields: [createdById],references: [id])
}