generator client {
  provider = "prisma-client-js"
}

datasource db{
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  sales_manager
  sales_rep
  telecaller
  finance
  ops
}


model user {
  id         String   @id @default(uuid())
  role       Role     @default(sales_rep)
  managerId  String?
  manager       user?   @relation("UserManager", fields: [managerId], references: [id])
  teamMembers   user[]  @relation("UserManager") 
  username   String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  otp        String?
  otpExpiry  DateTime?
  currentOrganizationId String? 
  currentOrganization   Organization? @relation(fields: [currentOrganizationId], references: [id])
  ownedOrganizations Organization[] @relation("OrgOwnedBy")
  assignedLeads Lead[] @relation("LeadAssignedTo")
  leadsCreated  Lead[]   @relation("LeadCreatedBy")
  myTasks Task[] @relation("UserCreatedTasks")
  verifiedPayments   Payment[]      @relation("PaymentVerifiedBy")

  PaymentTransaction PaymentTransaction[] @relation("PaymentVerifiedBy")
}
model Stage {
  id             String        @id @default(uuid())
  name           String
  order          Int           @default(0) 
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  leads          Lead[]        @relation("LeadStage")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
}

model Organization {
  id                       String   @id @default(uuid())
  organization_name        String
  company_website          String?
  industry                 String
  company_size             String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  employees                user[]
  owner                    user?     @relation("OrgOwnedBy", fields: [ownerId], references: [id])
  ownerId                  String?

  stages                   Stage[]
  leads                    Lead[]
    quotations               Quotation[]
  quotationTemplates       QuotationTemplate[]

  Order Order[]
}

model LeadLog {
  id        String   @id @default(uuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId    String
  userName  String
  action    String
  details   String?
  timestamp DateTime @default(now())
  type      String

  @@index([leadId, timestamp])
}

model LeadNotes{
  id        String   @id @default(uuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userName  String
  note      String
  createdById  String?
  timestamp DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([leadId, timestamp])
}

model Lead {
  position          Int      @default(0)
  @@index([organizationId, stageId, position])
  id                String   @id @default(uuid())
  name              String
  email             String @unique
  phone             String
  company           String @default("Unknown")
  source            String
  leadType          String @default("Hot") 
  contactPersonName String
  address           Json?
  requirements     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdBy         String?
  createdByUser     user? @relation("LeadCreatedBy", fields: [createdBy], references: [id])
  assignedToId      String?
  assignedTo        user? @relation("LeadAssignedTo", fields: [assignedToId], references: [id])

  // New relation to stage
  stageId           String?
  stage             Stage? @relation("LeadStage", fields: [stageId], references: [id])
  tasks Task[]
  logs LeadLog[]
  notes LeadNotes[]   
  quotations Quotation[]
  Order Order[]
}



enum TaskStatus {
  pending
  completed
  cancelled
}


enum TaskRepeatInterval {
  none
  daily
  weekly
  monthly
}

model Task {
  id     String @id @default(uuid())
  title String
  reminderOption String?
    reminderStatus  ReminderStatus?    @default(pending)  
  description    String?
  dueDate        DateTime
  reminder DateTime?
  status TaskStatus @default(pending)
  repeatInterval TaskRepeatInterval?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  leadId String
  lead Lead @relation(fields: [leadId],references: [id],onDelete: Cascade)
  createdById String
  createdBy user @relation("UserCreatedTasks",fields: [createdById],references: [id])
  completedAt DateTime?
}

enum ReminderStatus {
  pending     
  completed        
  missed
  seen
}


model QuotationTemplate {
  id            String   @id @default(uuid())
  companyId     String?
  company       Organization? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyName   String?
  companyEmail  String?
  companyPhone  String?
  companyAddress String?
  gstin         String?
  website       String?
  
  
  templateType  String   // "classic" | "modern" | "minimal"
  templateName  String   // e.g., "Minimal"

  logoUrl       String?
  headerFont    String?
  brandColor    String?
  signatureUrl  String?
  termsAndConditions String[]
  bankDetails   Json?
  defaultNotes  String[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  previewUrl    String?
  quotations     Quotation[]
}
model Quotation {
  id               String   @id @default(uuid())
  leadId           String?
  lead             Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  companyId        String
  company          Organization @relation(fields: [companyId], references: [id])
  templateId       String?
  template         QuotationTemplate? @relation(fields: [templateId], references: [id])
  quotationName    String?

  customerName     String
  customerCompany  String?
  customerEmail    String?
  customerPhone    String?
  billingAddress   Json?
  
  items            Json   
  
  subtotal         Float
  tax              Float
  total            Float
  validUntil       DateTime
  quoteNumber      String
  pdfUrl           String?
  isOrder          Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]
}


enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
}

model Order {
  id             String   @id @default(uuid())
  quotationId    String   
  quotation      Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  leadId         String?
  lead           Lead? @relation(fields: [leadId], references: [id])

  orderNumber    String
  status         OrderStatus @default(pending)
  totalAmount    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  confirmedAt    DateTime?
  deliveredAt    DateTime?
  cancelledAt    DateTime?
  pdfUrl       String?
  payments       Payment[]
}


enum PaymentStatus {
  pending
  completed
  failed
  refunded
  rejected
}
model Payment {
  id             String               @id @default(uuid())
  orderId        String
  order          Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  totalAmount    Float?                @default(0.0)
  amountPaid     Float?                @default(0.0)
  status         PaymentStatus?        @default(pending)
  note           String?
  paidAt         DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  transactions   PaymentTransaction[] 
  @@index([orderId])
  verifiedById    String?

  user user[] @relation("PaymentVerifiedBy")
}

model PaymentTransaction {
  id               String       @id @default(uuid())
  paymentId        String
  payment          Payment      @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  amount           Float
  transactionId    String       @unique
  paymentProofUrl  String?
  method           String?
  status           PaymentStatus @default(pending)
  paidAt           DateTime?  
  createdAt        DateTime      @default(now())
  verifiedById     String?
  verifiedBy      user?   @relation("PaymentVerifiedBy", fields: [verifiedById], references: [id])
  verifiedAt     DateTime?
}
